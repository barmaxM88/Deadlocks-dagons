@page "/help"
@inject NavigationManager NavManager

@code {
    private string? backUrl;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("from", out var returnTo))
        {
            backUrl = returnTo;
        }
    }
}

<h3>📖 Справка</h3>
<p>Это обучающая система, цель которой — научить тебя справляться с опасностями многопоточности: гонками, дедлоками и неожиданными эффектами синхронного выполнения.</p>

<hr />
<h4>⚠ Комната с ловушкой (Критическая секция)</h4>
<p>Критическая секция — участок кода, который не должен выполняться одновременно несколькими потоками. В игре это место, где если обе партии зайдут одновременно — включится ловушка.</p>

<h4>🔒 Дедлок</h4>
<p>Взаимная блокировка — ситуация, когда группы ждут освобождения ресурсов друг от друга и не могут продолжить. В игре: обе держат ключ от дверей, через которые хотят пройти.</p>

<h4>🐉 Гонка (Race condition)</h4>
<p>Когда два потока читают/пишут одну переменную одновременно. В игре это загадка от Сфинкса: если обе группы "победили" — беда.</p>

<h4>⛓ Неатомарность</h4>
<p>Операция вида <code>a = a + 1</code> может разделяться на несколько шагов. Если вмешаться между ними, результат непредсказуем.</p>

<h4>🔐 Мьютексы</h4>
<p>Механизм взаимного исключения. Только один поток может держать ресурс. В фэнтези-версии — магический замок.</p>

@if (!string.IsNullOrEmpty(backUrl))
{
    <a class="btn btn-outline-secondary mt-4" href="@backUrl">⬅ Вернуться к заданию</a>
}
